---
version: '3.7'

networks:
  default:
    name: ks2020_network
    driver: bridge

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.1
    hostname: zookeeper
    container_name: ks2020_zookeeper
    ports:
      - '2181:2181'
      - '47071:7071'
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/zookeeper-config.yml

  broker-1:
    image: confluentinc/cp-kafka:5.5.1
    hostname: broker-1
    container_name: ks2020_broker-1
    depends_on:
      - zookeeper
    ports:
      - '19092:19092'
      - '17071:7071'
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 10
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml

  broker-2:
    image: confluentinc/cp-kafka:5.5.1
    hostname: broker-2
    container_name: ks2020_broker-2
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
      - '27071:7071'
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 10
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml

  broker-3:
    image: confluentinc/cp-kafka:5.5.1
    hostname: broker-3
    container_name: ks2020_broker-3
    depends_on:
      - zookeeper
    ports:
      - '39092:39092'
      - '37071:7071'
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-3:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 10
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml

  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.1
    hostname: schema-registry
    container_name: ks2020_schema-registry
    depends_on:
      - zookeeper
      - broker-1
      - broker-2
      - broker-3
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

#  rest-proxy:
#    image: confluentinc/cp-kafka-rest:5.5.1
#    hostname: rest-proxy
#    container_name: ks2020_rest-proxy
#    depends_on:
#      - zookeeper
#      - broker-1
#    ports:
#      - '8082:8082'
#    environment:
#      KAFKA_REST_HOST_NAME: rest-proxy
#      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker-1:9092'
#      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'
#      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

#  ksql-server:
#    image: confluentinc/ksqldb-server:0.10.0
#    hostname: ksql-server
#    container_name: ks2020_ksql-server
#    depends_on:
#      - broker-1
#    ports:
#      - "8088:8088"
#    volumes:
#      - ./ksql:/etc/ksql/ext
#    environment:
#      KSQL_CONFIG_DIR: /etc/ksql
#      KSQL_KSQL_EXTENSION_DIR: /etc/ksql/ext
#      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
#      KSQL_BOOTSTRAP_SERVERS: "broker-1:9092"
#      KSQL_HOST_NAME: ksql-server
#      KSQL_APPLICATION_ID: "ksql-server"
#      KSQL_LISTENERS: "http://0.0.0.0:8088"
#      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
#      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#      KSQL_REST_ACCESS_CONTROL_ALLOW_ORIGIN: "*"
#      KSQL_REST_ACCESS_CONTROL_ALLOW_METHOS: "GET,POST,PUT,DELETE"
#      KSQL_REST_ACCESS_CONTROL_ALLOW_HEADERS: "origin,content-type,accept,authorization"
#      KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN: "*"
#      KAFKA_REST_ACCESS_CONTROL_ALLOW_METHOS: "GET,POST,PUT,DELETE"
#      KAFKA_REST_ACCESS_CONTROL_ALLOW_HEADERS: "origin,content-type,accept,authorization"
#
#    ksql-cli:
#    image: confluentinc/ksqldb-cli:0.10.0
#    container_name: ks2020_ksql-cli
#    depends_on:
#      - broker-1
#      - ksql-server
#    entrypoint: /bin/sh
#    tty: true

  nginx:
    #build: ./nginx
    image: ${DOCKER_USER}/nginx:2.0.0
    container_name: ks2020_nginx
    hostname: nginx
    ports:
      - '9080:80'
    depends_on:
      - rh1
      - rh2

  rh1:
    image: ${DOCKER_USER}/request-handler:2.0.0
    container_name: ks2020_rh1
    hostname: rh1
    ports:
      - '9081:9080'
    environment:
      ENVIRONMENT: docker

  rh2:
    image: ${DOCKER_USER}/request-handler:2.0.0
    container_name: ks2020_rh2
    hostname: rh2
    ports:
      - '9082:9080'
    environment:
      ENVIRONMENT: docker
    
#  nginx1:
#    image: nginx:1.17.5
#    container_name: ks2020_nginx1
#    hostname: nginx1
#    ports:
#      - '9091:80'
#    volumes:
#      - ./nginx1:/usr/share/nginx/html

#  nginx2:
#    image: nginx:1.17.5
#    container_name: ks2020_nginx2
#    hostname: nginx2
#    ports:
#      - '9092:80'
#    volumes:
#     - ./nginx2:/usr/share/nginx/html

